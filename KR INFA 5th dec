1. Плоскость x,y раскрашена как шахматная доска с шагом 2, первый квадрат от [0;0] до (2;2) - черный (левая и нижняя границы входят, правая и верхняя не входят).
X и y - от -1000 до +1000.

#include <stdio.h>
int main() {
    double x = 0;
    double y = 0; 
    scanf("(%lf;%lf)", &x, &y);
    int step_x = x/2;
    int step_y =y/2;
    int sum = step_x + step_y; 
    if (sum % 2) //если есть остаток, !=0, выполняется white
        printf("WHITE");
    else
        printf("BLACK");
}


2 & 3. Написать функцию, которая считает периметр четырехугольник. Написать main к предыдущей задаче, вызвать эту функцию для фигуры (-5,2;0,8), (1;10), (4;5,2), (6, 15). 

#include <stdio.h>
#include <math.h>

struct Point {
  double x, y;
};

struct Quad {
  struct Point left_bottom;
  struct Point left_top;
  struct Point right_bottom;
  struct Point right_top;
};


int func1(struct Quad X);

int main() {
    printf("Put coordinates of quadrangle starting from : left bottom > left top > right bottom > right top\n");
    struct Quad X;
    scanf("(%lf;%lf) ", &(X.left_bottom.x), &(X.left_bottom.y));
    scanf("(%lf;%lf) ", &(X.left_top.x), &(X.left_top.y));
    scanf("(%lf;%lf) ", &(X.right_top.x), &(X.right_top.y));
    scanf("(%lf;%lf)", &(X.right_bottom.x), &(X.right_bottom.y));
    
    func1(X);
    return 0;
    }


int func1(struct Quad X) {
    double x1 = X.left_bottom.x;
    double y1 = X.left_bottom.y;

    double x2 = X.left_top.x; 
    double y2 = X.left_top.y;

    double x3 = X.right_top.x;
    double y3 = X.right_top.y;

    double x4 = X.right_bottom.x;
    double y4 = X.right_bottom.y;

// ищем расст между точками по формуле sqrt((x2-x1)^2 + (y2-y1)^2)
    double dist12 = sqrt(((x2 - x1)*(x2 - x1)) + ((y2 - y1)*(y2 - y1)));
    double dist23 = sqrt(((x3 - x2)*(x3 - x2))+ ((y3 - y2)*(y3 - y2)));
    double dist34 = sqrt(((x3 - x4)*(x3 - x4)) + ((y3 - y4)*(y3 - y4)));
    double dist41 = sqrt(((x4 - x1)*(x4 - x1)) + ((y4 - y1)*(y4 - y1)));
    
    double P = dist12 + dist23 + dist34 + dist41; 
    printf("%lf", P);
    return 0;
}


4. Пользователь вводит N - сколько символов, которое он собирается ввести, потом сами символы. Записать их в массив, добавить последним символом 0, вызвать функцию strlen().

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
    int N;
    scanf("%d" , &N);
    char *s = (char*)malloc(sizeof(char)*(N+1));
    s[N] = '\0';   
    scanf("%s", s);
    printf("%lu\n", strlen(s));
    free(s);
}


5. Пользователь вводит огромное число (т.е., почти "бесконечный" набор числовых символов).
  a) Проверить делимость на 3;
  b) на 8;
  c) если встретилась не цифра - вывести сообщение об ошибке - "Error".


#include <stdio.h>

int div_by_3();
int div_by_8();

int main() {
    printf("Напечатайте 3 или 8 для проверки делимости соответствующего числа.");
    int d = 0; 
    scanf("%d\n", &d);
    if (d==3) 
        div_by_3();
    if (d==8)
        div_by_8();
    return 0;
}


int div_by_8(){
    int a,b,c,d = 0;
    d = getchar();
    while (d != '\n') {
        // цель в том, чтобы оно запоминало последние 3 цифры, а четвертое(послед), будет '\n' 
        a = b;
        b = c;
        c = d;
        d = getchar();
        if (((d <= '0' || d>= '9')) && d != '\n') {
            printf("ERROR");
            return 0;
        }
    }
    int a1 = a - '0';
    int b1 = b - '0';
    int c1 = c - '0';
    int sum = a1*100 + b1 *10*c1;
    // получим "циферки", запишем его как целое число, т.к мы знаем, что будет сотнями, десятками и единцами,
    // просто проверим на делимость.
    if (sum % 8 == 0) {
        printf("делимо на 8");
    }
    else {
        printf("не делимо 8");
    }
        
}

int div_by_3() {
    char c = 0;
    unsigned long long int s = 0;
    while((c = getchar()) != '\n') {
        s = s + (c - '0');
        if(((c < '0') || (c > '9')) && (c != '\n'))
        {
            printf("ERROR");
            return 0;
        }
    }
    if ((s % 3) == 0)
        printf("делимо на 3");
    else
        printf("не делимо на 3");
}


6.Printf
  a) перевести введенное пользователем число в 16тиричную систему счисления, используя только printf;

  b) даны 2 float - вывести их произведение;

  с) даны 2 double - вывести их разность с 4мя начальными нулями и 2мя знаками после запятой

#include <stdio.h>

int main() {
    printf("перевести введенное пользователем число в 16тиричную систему счисления, используя только printf\n");
    int number = 0;
    scanf("%d", &number); 
    printf("%X\n", number);

    printf("даны 2 float - вывести их произведение\n");
    float first, second;
    scanf("%f %f", &first, &second);
    float proizv= first * second;
    printf("%f\n", proizv);
    
    printf("даны 2 double - вывести их разность с 4мя начальными нулями и 2мя знаками после запятой\n");
    double one, two;
    scanf("%lf %lf", &one, &two);
    double raznost = one - two;
    printf("000%.2lf", raznost);
}


7. Дан массив 3 х 3. Считать из командной строки. Транспонировать. Распечатать.

#include <stdio.h>
int main() {
    int m[3][3];
    int i, k = 0;
    for(i = 0; i < 3; i++)
    {
        for(k = 0; k < 3; k ++)
        {
            scanf("%d", &m[i][k]);
        }
    }
    printf("\n");
    for(k = 0; k < 3; k++)
    {
        for(i = 0; i < 3; i ++)
        {
            printf("%d ", m[i][k]);
        }
        printf("\n");
    }
    return 0;
}


9&10. Реализовать функцию:

#include <stdio.h>
struct A {
  int a;
  char c;
};
void func(struct A *x) {
    int d = x->a;
    d++;
    printf("%d", d);

}


int main() {
    struct A XY;
    scanf("%d", &XY.a);
    func(&XY);

    return 0;
}






